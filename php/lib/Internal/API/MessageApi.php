<?php
/**
 * MessageApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Svix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each of your users. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Svix\Svix\Internal\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Svix\ApiException;
use Svix\Configuration;
use Svix\HeaderSelector;
use Svix\ObjectSerializer;

/**
 * MessageApi Class Doc Comment
 *
 * @category Class
 * @package  Svix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createMessageApiV1AppAppIdMsgPost
     *
     * Create Message
     *
     * @param  string $app_id app_id (required)
     * @param  \Svix\Svix\Models\MessageIn $message_in message_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function createMessageApiV1AppAppIdMsgPost($app_id, $message_in)
    {
        list($response) = $this->createMessageApiV1AppAppIdMsgPostWithHttpInfo($app_id, $message_in);
        return $response;
    }

    /**
     * Operation createMessageApiV1AppAppIdMsgPostWithHttpInfo
     *
     * Create Message
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\MessageIn $message_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMessageApiV1AppAppIdMsgPostWithHttpInfo($app_id, $message_in)
    {
        $request = $this->createMessageApiV1AppAppIdMsgPostRequest($app_id, $message_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Svix\Svix\Models\MessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\MessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\MessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\MessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMessageApiV1AppAppIdMsgPostAsync
     *
     * Create Message
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\MessageIn $message_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMessageApiV1AppAppIdMsgPostAsync($app_id, $message_in)
    {
        return $this->createMessageApiV1AppAppIdMsgPostAsyncWithHttpInfo($app_id, $message_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMessageApiV1AppAppIdMsgPostAsyncWithHttpInfo
     *
     * Create Message
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\MessageIn $message_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMessageApiV1AppAppIdMsgPostAsyncWithHttpInfo($app_id, $message_in)
    {
        $returnType = '\Svix\Svix\Models\MessageOut';
        $request = $this->createMessageApiV1AppAppIdMsgPostRequest($app_id, $message_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMessageApiV1AppAppIdMsgPost'
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\MessageIn $message_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMessageApiV1AppAppIdMsgPostRequest($app_id, $message_in)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createMessageApiV1AppAppIdMsgPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.createMessageApiV1AppAppIdMsgPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.createMessageApiV1AppAppIdMsgPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageApi.createMessageApiV1AppAppIdMsgPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'message_in' is set
        if ($message_in === null || (is_array($message_in) && count($message_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_in when calling createMessageApiV1AppAppIdMsgPost'
            );
        }

        $resourcePath = '/api/v1/app/{app_id}/msg/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($message_in)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($message_in));
            } else {
                $httpBody = $message_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessageApiV1AppAppIdMsgMsgIdGet
     *
     * Get Message
     *
     * @param  string $msg_id msg_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function getMessageApiV1AppAppIdMsgMsgIdGet($msg_id, $app_id)
    {
        list($response) = $this->getMessageApiV1AppAppIdMsgMsgIdGetWithHttpInfo($msg_id, $app_id);
        return $response;
    }

    /**
     * Operation getMessageApiV1AppAppIdMsgMsgIdGetWithHttpInfo
     *
     * Get Message
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageApiV1AppAppIdMsgMsgIdGetWithHttpInfo($msg_id, $app_id)
    {
        $request = $this->getMessageApiV1AppAppIdMsgMsgIdGetRequest($msg_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\MessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\MessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\MessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\MessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessageApiV1AppAppIdMsgMsgIdGetAsync
     *
     * Get Message
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageApiV1AppAppIdMsgMsgIdGetAsync($msg_id, $app_id)
    {
        return $this->getMessageApiV1AppAppIdMsgMsgIdGetAsyncWithHttpInfo($msg_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageApiV1AppAppIdMsgMsgIdGetAsyncWithHttpInfo
     *
     * Get Message
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageApiV1AppAppIdMsgMsgIdGetAsyncWithHttpInfo($msg_id, $app_id)
    {
        $returnType = '\Svix\Svix\Models\MessageOut';
        $request = $this->getMessageApiV1AppAppIdMsgMsgIdGetRequest($msg_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessageApiV1AppAppIdMsgMsgIdGet'
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessageApiV1AppAppIdMsgMsgIdGetRequest($msg_id, $app_id)
    {
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling getMessageApiV1AppAppIdMsgMsgIdGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getMessageApiV1AppAppIdMsgMsgIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageApi.getMessageApiV1AppAppIdMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMessagesApiV1AppAppIdMsgGet
     *
     * List Messages
     *
     * @param  string $app_id app_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string[] $event_types event_types (optional)
     * @param  \DateTime $before before (optional)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\ListResponseMessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function listMessagesApiV1AppAppIdMsgGet($app_id, $iterator = null, $limit = 50, $event_types = null, $before = null)
    {
        list($response) = $this->listMessagesApiV1AppAppIdMsgGetWithHttpInfo($app_id, $iterator, $limit, $event_types, $before);
        return $response;
    }

    /**
     * Operation listMessagesApiV1AppAppIdMsgGetWithHttpInfo
     *
     * List Messages
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  \DateTime $before (optional)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\ListResponseMessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMessagesApiV1AppAppIdMsgGetWithHttpInfo($app_id, $iterator = null, $limit = 50, $event_types = null, $before = null)
    {
        $request = $this->listMessagesApiV1AppAppIdMsgGetRequest($app_id, $iterator, $limit, $event_types, $before);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\ListResponseMessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\ListResponseMessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\ListResponseMessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\ListResponseMessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMessagesApiV1AppAppIdMsgGetAsync
     *
     * List Messages
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  \DateTime $before (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMessagesApiV1AppAppIdMsgGetAsync($app_id, $iterator = null, $limit = 50, $event_types = null, $before = null)
    {
        return $this->listMessagesApiV1AppAppIdMsgGetAsyncWithHttpInfo($app_id, $iterator, $limit, $event_types, $before)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMessagesApiV1AppAppIdMsgGetAsyncWithHttpInfo
     *
     * List Messages
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  \DateTime $before (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMessagesApiV1AppAppIdMsgGetAsyncWithHttpInfo($app_id, $iterator = null, $limit = 50, $event_types = null, $before = null)
    {
        $returnType = '\Svix\Svix\Models\ListResponseMessageOut';
        $request = $this->listMessagesApiV1AppAppIdMsgGetRequest($app_id, $iterator, $limit, $event_types, $before);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMessagesApiV1AppAppIdMsgGet'
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  \DateTime $before (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMessagesApiV1AppAppIdMsgGetRequest($app_id, $iterator = null, $limit = 50, $event_types = null, $before = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listMessagesApiV1AppAppIdMsgGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.listMessagesApiV1AppAppIdMsgGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageApi.listMessagesApiV1AppAppIdMsgGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageApi.listMessagesApiV1AppAppIdMsgGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/msg/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($iterator !== null) {
            if('form' === 'form' && is_array($iterator)) {
                foreach($iterator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iterator'] = $iterator;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($event_types !== null) {
            if('form' === 'form' && is_array($event_types)) {
                foreach($event_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['event_types'] = $event_types;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
