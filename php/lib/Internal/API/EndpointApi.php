<?php
/**
 * EndpointApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Svix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each of your users. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Svix\Svix\Internal\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Svix\ApiException;
use Svix\Configuration;
use Svix\HeaderSelector;
use Svix\ObjectSerializer;

/**
 * EndpointApi Class Doc Comment
 *
 * @category Class
 * @package  Svix
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EndpointApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPost
     *
     * Create Endpoint
     *
     * @param  string $app_id app_id (required)
     * @param  \Svix\Svix\Models\EndpointIn $endpoint_in endpoint_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function createEndpointApiV1AppAppIdEndpointPost($app_id, $endpoint_in)
    {
        list($response) = $this->createEndpointApiV1AppAppIdEndpointPostWithHttpInfo($app_id, $endpoint_in);
        return $response;
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointIn $endpoint_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEndpointApiV1AppAppIdEndpointPostWithHttpInfo($app_id, $endpoint_in)
    {
        $request = $this->createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Svix\Svix\Models\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostAsync
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointIn $endpoint_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointApiV1AppAppIdEndpointPostAsync($app_id, $endpoint_in)
    {
        return $this->createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo($app_id, $endpoint_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointIn $endpoint_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo($app_id, $endpoint_in)
    {
        $returnType = '\Svix\Svix\Models\EndpointOut';
        $request = $this->createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEndpointApiV1AppAppIdEndpointPost'
     *
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointIn $endpoint_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createEndpointApiV1AppAppIdEndpointPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'endpoint_in' is set
        if ($endpoint_in === null || (is_array($endpoint_in) && count($endpoint_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_in when calling createEndpointApiV1AppAppIdEndpointPost'
            );
        }

        $resourcePath = '/api/v1/app/{app_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($endpoint_in)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_in));
            } else {
                $httpBody = $endpoint_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete($endpoint_id, $app_id)
    {
        $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo($endpoint_id, $app_id);
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo($endpoint_id, $app_id)
    {
        $request = $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsync
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsync($endpoint_id, $app_id)
    {
        return $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo($endpoint_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo($endpoint_id, $app_id)
    {
        $returnType = '';
        $request = $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGet
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGet($endpoint_id, $app_id)
    {
        list($response) = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo($endpoint_id, $app_id);
        return $response;
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo($endpoint_id, $app_id)
    {
        $request = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetAsync
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetAsync($endpoint_id, $app_id)
    {
        return $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo($endpoint_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo($endpoint_id, $app_id)
    {
        $returnType = '\Svix\Svix\Models\EndpointOut';
        $request = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointApiV1AppAppIdEndpointEndpointIdGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\EndpointSecretOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet($endpoint_id, $app_id)
    {
        list($response) = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo($endpoint_id, $app_id);
        return $response;
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\EndpointSecretOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo($endpoint_id, $app_id)
    {
        $request = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\EndpointSecretOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\EndpointSecretOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\EndpointSecretOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\EndpointSecretOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsync
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsync($endpoint_id, $app_id)
    {
        return $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo($endpoint_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo($endpoint_id, $app_id)
    {
        $returnType = '\Svix\Svix\Models\EndpointSecretOut';
        $request = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\EndpointStats|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet($endpoint_id, $app_id)
    {
        list($response) = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo($endpoint_id, $app_id);
        return $response;
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\EndpointStats|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo($endpoint_id, $app_id)
    {
        $request = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\EndpointStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\EndpointStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\EndpointStats';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\EndpointStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsync
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsync($endpoint_id, $app_id)
    {
        return $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo($endpoint_id, $app_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo($endpoint_id, $app_id)
    {
        $returnType = '\Svix\Svix\Models\EndpointStats';
        $request = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGet
     *
     * List Endpoints
     *
     * @param  string $app_id app_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\ListResponseEndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function listEndpointsApiV1AppAppIdEndpointGet($app_id, $iterator = null, $limit = 50)
    {
        list($response) = $this->listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo($app_id, $iterator, $limit);
        return $response;
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\ListResponseEndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo($app_id, $iterator = null, $limit = 50)
    {
        $request = $this->listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\ListResponseEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\ListResponseEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\ListResponseEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\ListResponseEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetAsync
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEndpointsApiV1AppAppIdEndpointGetAsync($app_id, $iterator = null, $limit = 50)
    {
        return $this->listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo($app_id, $iterator, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo($app_id, $iterator = null, $limit = 50)
    {
        $returnType = '\Svix\Svix\Models\ListResponseEndpointOut';
        $request = $this->listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEndpointsApiV1AppAppIdEndpointGet'
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator = null, $limit = 50)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listEndpointsApiV1AppAppIdEndpointGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }


        $resourcePath = '/api/v1/app/{app_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($iterator !== null) {
            if('form' === 'form' && is_array($iterator)) {
                foreach($iterator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['iterator'] = $iterator;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }


        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost
     *
     * Send Event Type Example Message
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  \Svix\Svix\Models\EventExampleIn $event_example_in event_example_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost($app_id, $endpoint_id, $event_example_in)
    {
        list($response) = $this->sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostWithHttpInfo($app_id, $endpoint_id, $event_example_in);
        return $response;
    }

    /**
     * Operation sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostWithHttpInfo
     *
     * Send Event Type Example Message
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \Svix\Svix\Models\EventExampleIn $event_example_in (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\MessageOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostWithHttpInfo($app_id, $endpoint_id, $event_example_in)
    {
        $request = $this->sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostRequest($app_id, $endpoint_id, $event_example_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Svix\Svix\Models\MessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\MessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\MessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\MessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostAsync
     *
     * Send Event Type Example Message
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \Svix\Svix\Models\EventExampleIn $event_example_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostAsync($app_id, $endpoint_id, $event_example_in)
    {
        return $this->sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostAsyncWithHttpInfo($app_id, $endpoint_id, $event_example_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostAsyncWithHttpInfo
     *
     * Send Event Type Example Message
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \Svix\Svix\Models\EventExampleIn $event_example_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostAsyncWithHttpInfo($app_id, $endpoint_id, $event_example_in)
    {
        $returnType = '\Svix\Svix\Models\MessageOut';
        $request = $this->sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostRequest($app_id, $endpoint_id, $event_example_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \Svix\Svix\Models\EventExampleIn $event_example_in (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostRequest($app_id, $endpoint_id, $event_example_in)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'event_example_in' is set
        if ($event_example_in === null || (is_array($event_example_in) && count($event_example_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_example_in when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost'
            );
        }

        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event_example_in)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event_example_in));
            } else {
                $httpBody = $event_example_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPut
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  \Svix\Svix\Models\EndpointUpdate $endpoint_update endpoint_update (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPut($endpoint_id, $app_id, $endpoint_update)
    {
        list($response) = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo($endpoint_id, $app_id, $endpoint_update);
        return $response;
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointUpdate $endpoint_update (required)
     *
     * @throws \Svix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Svix\Svix\Models\EndpointOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HttpErrorOut|\Svix\Svix\Models\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo($endpoint_id, $app_id, $endpoint_update)
    {
        $request = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Svix\Svix\Models\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Svix\Svix\Models\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Svix\Svix\Models\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Svix\Svix\Models\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Svix\Svix\Models\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Svix\Svix\Models\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsync
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointUpdate $endpoint_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsync($endpoint_id, $app_id, $endpoint_update)
    {
        return $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointUpdate $endpoint_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_update)
    {
        $returnType = '\Svix\Svix\Models\EndpointOut';
        $request = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \Svix\Svix\Models\EndpointUpdate $endpoint_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }

        // verify the required parameter 'endpoint_update' is set
        if ($endpoint_update === null || (is_array($endpoint_update) && count($endpoint_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_update when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }

        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($endpoint_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_update));
            } else {
                $httpBody = $endpoint_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
